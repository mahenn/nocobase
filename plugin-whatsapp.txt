This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-01T07:28:35.078Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
src/
  client/
    client.d.ts
    index.tsx
    locale.ts
  locale/
    en-US.json
    zh-CN.json
  server/
    collections/
      chats.ts
      contacts.ts
      groupMetadata.ts
      messages.ts
      sessions.ts
    index.ts
    plugin.ts
  index.ts
.npmignore
client.d.ts
client.js
package.json
README.md
server.d.ts
server.js

================================================================
Repository Files
================================================================

================
File: src/client/client.d.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

// CSS modules
type CSSModuleClasses = { readonly [key: string]: string };

declare module '*.module.css' {
  const classes: CSSModuleClasses;
  export default classes;
}
declare module '*.module.scss' {
  const classes: CSSModuleClasses;
  export default classes;
}
declare module '*.module.sass' {
  const classes: CSSModuleClasses;
  export default classes;
}
declare module '*.module.less' {
  const classes: CSSModuleClasses;
  export default classes;
}
declare module '*.module.styl' {
  const classes: CSSModuleClasses;
  export default classes;
}
declare module '*.module.stylus' {
  const classes: CSSModuleClasses;
  export default classes;
}
declare module '*.module.pcss' {
  const classes: CSSModuleClasses;
  export default classes;
}
declare module '*.module.sss' {
  const classes: CSSModuleClasses;
  export default classes;
}

// CSS
declare module '*.css' { }
declare module '*.scss' { }
declare module '*.sass' { }
declare module '*.less' { }
declare module '*.styl' { }
declare module '*.stylus' { }
declare module '*.pcss' { }
declare module '*.sss' { }

// Built-in asset types
// see `src/node/constants.ts`

// images
declare module '*.apng' {
  const src: string;
  export default src;
}
declare module '*.png' {
  const src: string;
  export default src;
}
declare module '*.jpg' {
  const src: string;
  export default src;
}
declare module '*.jpeg' {
  const src: string;
  export default src;
}
declare module '*.jfif' {
  const src: string;
  export default src;
}
declare module '*.pjpeg' {
  const src: string;
  export default src;
}
declare module '*.pjp' {
  const src: string;
  export default src;
}
declare module '*.gif' {
  const src: string;
  export default src;
}
declare module '*.svg' {
  const src: string;
  export default src;
}
declare module '*.ico' {
  const src: string;
  export default src;
}
declare module '*.webp' {
  const src: string;
  export default src;
}
declare module '*.avif' {
  const src: string;
  export default src;
}

// media
declare module '*.mp4' {
  const src: string;
  export default src;
}
declare module '*.webm' {
  const src: string;
  export default src;
}
declare module '*.ogg' {
  const src: string;
  export default src;
}
declare module '*.mp3' {
  const src: string;
  export default src;
}
declare module '*.wav' {
  const src: string;
  export default src;
}
declare module '*.flac' {
  const src: string;
  export default src;
}
declare module '*.aac' {
  const src: string;
  export default src;
}
declare module '*.opus' {
  const src: string;
  export default src;
}
declare module '*.mov' {
  const src: string;
  export default src;
}
declare module '*.m4a' {
  const src: string;
  export default src;
}
declare module '*.vtt' {
  const src: string;
  export default src;
}

// fonts
declare module '*.woff' {
  const src: string;
  export default src;
}
declare module '*.woff2' {
  const src: string;
  export default src;
}
declare module '*.eot' {
  const src: string;
  export default src;
}
declare module '*.ttf' {
  const src: string;
  export default src;
}
declare module '*.otf' {
  const src: string;
  export default src;
}

// other
declare module '*.webmanifest' {
  const src: string;
  export default src;
}
declare module '*.pdf' {
  const src: string;
  export default src;
}
declare module '*.txt' {
  const src: string;
  export default src;
}

// wasm?init
declare module '*.wasm?init' {
  const initWasm: (options?: WebAssembly.Imports) => Promise<WebAssembly.Instance>;
  export default initWasm;
}

// web worker
declare module '*?worker' {
  const workerConstructor: {
    new(options?: { name?: string }): Worker;
  };
  export default workerConstructor;
}

declare module '*?worker&inline' {
  const workerConstructor: {
    new(options?: { name?: string }): Worker;
  };
  export default workerConstructor;
}

declare module '*?worker&url' {
  const src: string;
  export default src;
}

declare module '*?sharedworker' {
  const sharedWorkerConstructor: {
    new(options?: { name?: string }): SharedWorker;
  };
  export default sharedWorkerConstructor;
}

declare module '*?sharedworker&inline' {
  const sharedWorkerConstructor: {
    new(options?: { name?: string }): SharedWorker;
  };
  export default sharedWorkerConstructor;
}

declare module '*?sharedworker&url' {
  const src: string;
  export default src;
}

declare module '*?raw' {
  const src: string;
  export default src;
}

declare module '*?url' {
  const src: string;
  export default src;
}

declare module '*?inline' {
  const src: string;
  export default src;
}

================
File: src/client/index.tsx
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

import { Plugin } from '@nocobase/client';

export class PluginWhatsappClient extends Plugin {
  async afterAdd() {
    // await this.app.pm.add()
  }

  async beforeLoad() {}

  // You can get and modify the app instance here
  async load() {
    console.log(this.app);
    // this.app.addComponents({})
    // this.app.addScopes({})
    // this.app.addProvider()
    // this.app.addProviders()
    // this.app.router.add()
  }
}

export default PluginWhatsappClient;

================
File: src/client/locale.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

// @ts-ignore
import pkg from './../../package.json';
import { useApp } from '@nocobase/client';

export function useT() {
  const app = useApp();
  return (str: string) => app.i18n.t(str, { ns: [pkg.name, 'client'] });
}

export function tStr(key: string) {
  return `{{t(${JSON.stringify(key)}, { ns: ['${pkg.name}', 'client'], nsMode: 'fallback' })}}`;
}

================
File: src/locale/en-US.json
================
{}

================
File: src/locale/zh-CN.json
================
{}

================
File: src/server/collections/chats.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

// plugins/whatsapp/src/collections/chats.ts
export default {
  name: 'chats',
  createdBy: true,
  updatedBy: true,
  fields: [
    {
      type: 'bigInt',
      name: 'pkId',
      primaryKey: true,
      autoIncrement: true,
    },
    {
      type: 'string',
      name: 'sessionId',
      length: 128,
      index: true,
    },
    {
      type: 'boolean',
      name: 'archived',
    },
    {
      type: 'json',
      name: 'contactPrimaryIdentityKey',
    },
    {
      type: 'bigInt',
      name: 'conversationTimestamp',
    },
    {
      type: 'bigInt',
      name: 'createdAt',
    },
    {
      type: 'string',
      name: 'createdBy',
      length: 128,
    },
    {
      type: 'string',
      name: 'description',
      length: 500,
    },
    {
      type: 'json',
      name: 'disappearingMode',
    },
    {
      type: 'string',
      name: 'displayName',
      length: 128,
    },
    {
      type: 'boolean',
      name: 'endOfHistoryTransfer',
    },
    {
      type: 'integer',
      name: 'endOfHistoryTransferType',
    },
    {
      type: 'integer',
      name: 'ephemeralExpiration',
    },
    {
      type: 'bigInt',
      name: 'ephemeralSettingTimestamp',
    },
    {
      type: 'string',
      name: 'id',
      length: 128,
    },
    {
      type: 'boolean',
      name: 'isDefaultSubgroup',
    },
    {
      type: 'boolean',
      name: 'isParentGroup',
    },
    {
      type: 'bigInt',
      name: 'lastMsgTimestamp',
    },
    {
      type: 'string',
      name: 'lidJid',
      length: 128,
    },
    {
      type: 'boolean',
      name: 'markedAsUnread',
    },
    {
      type: 'integer',
      name: 'mediaVisibility',
    },
    {
      type: 'json',
      name: 'messages',
    },
    {
      type: 'bigInt',
      name: 'muteEndTime',
    },
    {
      type: 'string',
      name: 'name',
      length: 128,
    },
    {
      type: 'string',
      name: 'newJid',
      length: 128,
    },
    {
      type: 'boolean',
      name: 'notSpam',
    },
    {
      type: 'string',
      name: 'oldJid',
      length: 128,
    },
    {
      type: 'string',
      name: 'pHash',
      length: 128,
    },
    {
      type: 'string',
      name: 'parentGroupId',
      length: 128,
    },
    {
      type: 'json',
      name: 'participant',
    },
    {
      type: 'bigInt',
      name: 'pinned',
    },
    {
      type: 'string',
      name: 'pnJid',
      length: 128,
    },
    {
      type: 'boolean',
      name: 'pnhDuplicateLidThread',
    },
    {
      type: 'boolean',
      name: 'readOnly',
    },
    {
      type: 'boolean',
      name: 'shareOwnPn',
    },
    {
      type: 'boolean',
      name: 'support',
    },
    {
      type: 'boolean',
      name: 'suspended',
    },
    {
      type: 'json',
      name: 'tcToken',
    },
    {
      type: 'bigInt',
      name: 'tcTokenSenderTimestamp',
    },
    {
      type: 'bigInt',
      name: 'tcTokenTimestamp',
    },
    {
      type: 'boolean',
      name: 'terminated',
    },
    {
      type: 'integer',
      name: 'unreadCount',
    },
    {
      type: 'integer',
      name: 'unreadMentionCount',
    },
    {
      type: 'json',
      name: 'wallpaper',
    },
    {
      type: 'integer',
      name: 'lastMessageRecvTimestamp',
    },
    {
      type: 'integer',
      name: 'commentsCount',
    },
    {
      type: 'hasMany',
      name: 'messages',
      target: 'messages',
      foreignKey: 'remoteJid',
      sourceKey: 'id',
    },
    {
      type: 'belongsTo',
      name: 'session',
      target: 'sessions',
      foreignKey: 'sessionId',
      targetKey: 'sessionId',
    },
  ],
  indexes: [
    {
      unique: true,
      fields: ['sessionId', 'id'],
    },
    {
      fields: ['sessionId'],
    },
  ],
};

================
File: src/server/collections/contacts.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

// plugins/whatsapp/src/collections/contacts.ts
export default {
  name: 'contacts',
  createdBy: true,
  updatedBy: true,
  fields: [
    {
      type: 'bigInt',
      name: 'pkId',
      primaryKey: true,
      autoIncrement: true,
    },
    {
      type: 'string',
      name: 'sessionId',
      length: 128,
      index: true,
    },
    {
      type: 'string',
      name: 'id',
      length: 128,
    },
    {
      type: 'string',
      name: 'name',
      length: 128,
    },
    {
      type: 'string',
      name: 'notify',
      length: 128,
    },
    {
      type: 'string',
      name: 'verifiedName',
      length: 128,
    },
    {
      type: 'string',
      name: 'imgUrl',
      length: 255,
    },
    {
      type: 'string',
      name: 'status',
      length: 128,
    },
    {
      type: 'belongsTo',
      name: 'session',
      target: 'sessions',
      foreignKey: 'sessionId',
      targetKey: 'sessionId',
    },
  ],
  indexes: [
    {
      unique: true,
      fields: ['sessionId', 'id'],
    },
    {
      fields: ['sessionId'],
    },
  ],
};

================
File: src/server/collections/groupMetadata.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

// plugins/whatsapp/src/collections/groupMetadata.ts
export default {
  name: 'groupMetadata',
  createdBy: true,
  updatedBy: true,
  fields: [
    {
      type: 'bigInt',
      name: 'pkId',
      primaryKey: true,
      autoIncrement: true,
    },
    {
      type: 'string',
      name: 'sessionId',
      length: 128,
      index: true,
    },
    {
      type: 'string',
      name: 'id',
      length: 128,
    },
    {
      type: 'string',
      name: 'owner',
      length: 128,
    },
    {
      type: 'string',
      name: 'subject',
      length: 128,
    },
    {
      type: 'integer',
      name: 'creation',
    },
    {
      type: 'string',
      name: 'desc',
      length: 500,
    },
    {
      type: 'string',
      name: 'descOwner',
      length: 128,
    },
    {
      type: 'boolean',
      name: 'restrict',
    },
    {
      type: 'boolean',
      name: 'announce',
    },
    {
      type: 'integer',
      name: 'size',
    },
    {
      type: 'json',
      name: 'participants',
    },
    {
      type: 'integer',
      name: 'ephemeralDuration',
    },
    {
      type: 'string',
      name: 'inviteCode',
      length: 255,
    },
    {
      type: 'bigInt',
      name: 'descId',
    },
    {
      type: 'bigInt',
      name: 'descTime',
    },
    {
      type: 'string',
      name: 'groupInviteLink',
      length: 255,
    },
    {
      type: 'boolean',
      name: 'isParentGroup',
    },
    {
      type: 'json',
      name: 'memberAddMode',
    },
    {
      type: 'integer',
      name: 'numSubgroups',
    },
    {
      type: 'string',
      name: 'parentGroupId',
      length: 128,
    },
    {
      type: 'json',
      name: 'support',
    },
    {
      type: 'boolean',
      name: 'suspended',
    },
    {
      type: 'json',
      name: 'terminatedUserJids',
    },
    {
      type: 'hasOne',
      name: 'chat',
      target: 'chats',
      foreignKey: 'id',
      sourceKey: 'id',
    },
  ],
  indexes: [
    {
      unique: true,
      fields: ['sessionId', 'id'],
    },
    {
      fields: ['sessionId'],
    },
  ],
};

================
File: src/server/collections/messages.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

// plugins/whatsapp/src/collections/messages.ts
export default {
  name: 'messages',
  createdBy: true,
  updatedBy: true,
  fields: [
    {
      type: 'bigInt',
      name: 'pkId',
      primaryKey: true,
      autoIncrement: true,
    },
    {
      type: 'string',
      name: 'sessionId',
      length: 128,
      index: true,
    },
    {
      type: 'string',
      name: 'remoteJid',
      length: 128,
    },
    {
      type: 'string',
      name: 'id',
      length: 128,
    },
    {
      type: 'json',
      name: 'key',
    },
    {
      type: 'json',
      name: 'message',
    },
    {
      type: 'bigInt',
      name: 'messageTimestamp',
    },
    {
      type: 'string',
      name: 'pushName',
      length: 128,
    },
    {
      type: 'string',
      name: 'participant',
      length: 128,
    },
    {
      type: 'integer',
      name: 'status',
    },
    {
      type: 'integer',
      name: 'messageStubType',
    },
    {
      type: 'json',
      name: 'reactions',
    },
    {
      type: 'json',
      name: 'userReceipt',
    },
    {
      type: 'json',
      name: 'mediaData',
    },
    {
      type: 'boolean',
      name: 'broadcast',
    },
    {
      type: 'boolean',
      name: 'clearMedia',
    },
    {
      type: 'integer',
      name: 'duration',
    },
    {
      type: 'json',
      name: 'ephemeralOutOfSync',
    },
    {
      type: 'string',
      name: 'ephemeralStartTimestamp',
      length: 128,
    },
    {
      type: 'json',
      name: 'labels',
    },
    {
      type: 'string',
      name: 'mediaKeyTimestamp',
      length: 128,
    },
    {
      type: 'integer',
      name: 'mediaCiphertextSha256',
    },
    {
      type: 'string',
      name: 'mediaEncSha256',
      length: 128,
    },
    {
      type: 'string',
      name: 'messageC2STimestamp',
      length: 128,
    },
    {
      type: 'boolean',
      name: 'multicast',
    },
    {
      type: 'string',
      name: 'originalSelfAuthorUserJid',
      length: 128,
    },
    {
      type: 'json',
      name: 'paymentInfo',
    },
    {
      type: 'boolean',
      name: 'finalLiveLocation',
    },
    {
      type: 'json',
      name: 'quotedPaymentInfo',
    },
    {
      type: 'json',
      name: 'quotedStickerData',
    },
    {
      type: 'string',
      name: 'serverToken',
      length: 128,
    },
    {
      type: 'json',
      name: 'statusAlreadyViewed',
    },
    {
      type: 'string',
      name: 'messageSecret',
      length: 128,
    },
    {
      type: 'integer',
      name: 'starred',
    },
    {
      type: 'json',
      name: 'viewOnceMessage',
    },
    {
      type: 'belongsTo',
      name: 'chat',
      target: 'chats',
      foreignKey: 'remoteJid',
      targetKey: 'id',
    },
    {
      type: 'belongsTo',
      name: 'session',
      target: 'sessions',
      foreignKey: 'sessionId',
      targetKey: 'sessionId',
    },
  ],
  indexes: [
    {
      unique: true,
      fields: ['sessionId', 'remoteJid', 'id'],
    },
    {
      fields: ['sessionId'],
    },
  ],
};

================
File: src/server/collections/sessions.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

// src/server/collections/sessions.ts
export default {
  name: 'sessions',
  createdBy: true,
  updatedBy: true,
  fields: [
    {
      type: 'bigInt',
      name: 'pkId',
      primaryKey: true,
      autoIncrement: true,
    },
    {
      type: 'string',
      name: 'sessionId',
      length: 128,
      index: true,
    },
    {
      type: 'string',
      name: 'id',
      length: 255,
    },
    {
      type: 'text',
      name: 'data',
    },
  ],
  indexes: [
    {
      unique: true,
      fields: ['sessionId'],
    },
  ],
};

================
File: src/server/index.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

export { default } from './plugin';

================
File: src/server/plugin.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

import { Plugin } from '@nocobase/server';
import path from 'path';

export class PluginWhatsappServer extends Plugin {
  async afterAdd() {}

  async beforeLoad() {}

  async load() {
    await this.db.import({
      directory: path.resolve(__dirname, 'collections'),
    });

    // Set up permissions
    this.app.acl.allow('chats', '*');
    this.app.acl.allow('contacts', '*');
    this.app.acl.allow('messages', '*');
    this.app.acl.allow('groupMetadata', '*');
    this.app.acl.allow('sessions', '*');
  }

  async install() {}

  async afterEnable() {}

  async afterDisable() {}

  async remove() {}
}

export default PluginWhatsappServer;

================
File: src/index.ts
================
/**
 * This file is part of the NocoBase (R) project.
 * Copyright (c) 2020-2024 NocoBase Co., Ltd.
 * Authors: NocoBase Team.
 *
 * This project is dual-licensed under AGPL-3.0 and NocoBase Commercial License.
 * For more information, please refer to: https://www.nocobase.com/agreement.
 */

export * from './server';
export { default } from './server';

================
File: .npmignore
================
/node_modules
/src

================
File: client.d.ts
================
export * from './dist/client';
export { default } from './dist/client';

================
File: client.js
================
module.exports = require('./dist/client/index.js');

================
File: package.json
================
{
  "name": "@nocobase/plugin-whatsapp",
  "version": "1.3.54",
  "main": "dist/server/index.js",
  "dependencies": {},
  "peerDependencies": {
    "@nocobase/client": "1.x",
    "@nocobase/server": "1.x",
    "@nocobase/test": "1.x"
  }
}

================
File: README.md
================
# @nocobase/plugin-whatsapp

================
File: server.d.ts
================
export * from './dist/server';
export { default } from './dist/server';

================
File: server.js
================
module.exports = require('./dist/server/index.js');
